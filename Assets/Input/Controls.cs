//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""8467a54a-dd27-4e07-8896-a51b0c95974d"",
            ""actions"": [
                {
                    ""name"": ""Player1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bc1ceb38-a16a-4ab5-b834-95d74d15a745"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ab4871b4-a10b-4f6c-b06d-12f7b2ec1f0d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""eaced239-41cb-4d85-84e7-8a6aba661fc1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b5b33d9f-c9bb-4dd7-8044-963c6f12aa1f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Player1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""99b9362e-9103-4b68-8d07-5c8edd95bf6f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Player1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6c9f349a-d19b-4b17-8748-c83d72ec1e1f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Player1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ec64bb18-a6db-4532-966d-3d3185ca8490"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Player1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cf51ccdb-6c4f-486b-81e5-78da23f37a00"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7a864018-3527-422a-83d8-aacd9f88ebed"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Player2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3ddcae73-dbdc-410d-bcb8-fcb80e8fa06c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Player2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f2bee1e7-9f94-4ecc-9d2e-3f02654189e7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Player2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ab4ce317-390c-45ac-acbb-0b6587f62aa7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Player2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Boss"",
            ""id"": ""497011c0-e62c-4c19-9714-a5affa4b7c64"",
            ""actions"": [
                {
                    ""name"": ""BossPlayerUp"",
                    ""type"": ""Button"",
                    ""id"": ""602c2f99-a781-4e20-bf3f-2513cee5c6d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BossPlayerLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c9749715-fb87-4512-bfef-f1284a9dc261"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BossPlayerRight"",
                    ""type"": ""Button"",
                    ""id"": ""09dbd5c2-f51b-46c5-a24a-ad5b03aba912"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BossPlayerDown"",
                    ""type"": ""Button"",
                    ""id"": ""d43d2c68-4ace-423e-a0d4-0caa5ec9b333"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d3720a5-a563-4c89-92a3-869055c7ea40"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BossPlayerUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1e35476-f18c-40ca-95a7-b0b1c9f51f00"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BossPlayerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdf08754-a165-4c25-84dc-1da132616b47"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BossPlayerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db863f9b-ea4f-4a37-8ce8-a50ab65bcbe7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BossPlayerDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default"",
            ""bindingGroup"": ""Default"",
            ""devices"": []
        }
    ]
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Player1 = m_Default.FindAction("Player1", throwIfNotFound: true);
        m_Default_Player2 = m_Default.FindAction("Player2", throwIfNotFound: true);
        // Boss
        m_Boss = asset.FindActionMap("Boss", throwIfNotFound: true);
        m_Boss_BossPlayerUp = m_Boss.FindAction("BossPlayerUp", throwIfNotFound: true);
        m_Boss_BossPlayerLeft = m_Boss.FindAction("BossPlayerLeft", throwIfNotFound: true);
        m_Boss_BossPlayerRight = m_Boss.FindAction("BossPlayerRight", throwIfNotFound: true);
        m_Boss_BossPlayerDown = m_Boss.FindAction("BossPlayerDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
    private readonly InputAction m_Default_Player1;
    private readonly InputAction m_Default_Player2;
    public struct DefaultActions
    {
        private @Controls m_Wrapper;
        public DefaultActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1 => m_Wrapper.m_Default_Player1;
        public InputAction @Player2 => m_Wrapper.m_Default_Player2;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
            @Player1.started += instance.OnPlayer1;
            @Player1.performed += instance.OnPlayer1;
            @Player1.canceled += instance.OnPlayer1;
            @Player2.started += instance.OnPlayer2;
            @Player2.performed += instance.OnPlayer2;
            @Player2.canceled += instance.OnPlayer2;
        }

        private void UnregisterCallbacks(IDefaultActions instance)
        {
            @Player1.started -= instance.OnPlayer1;
            @Player1.performed -= instance.OnPlayer1;
            @Player1.canceled -= instance.OnPlayer1;
            @Player2.started -= instance.OnPlayer2;
            @Player2.performed -= instance.OnPlayer2;
            @Player2.canceled -= instance.OnPlayer2;
        }

        public void RemoveCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActions @Default => new DefaultActions(this);

    // Boss
    private readonly InputActionMap m_Boss;
    private List<IBossActions> m_BossActionsCallbackInterfaces = new List<IBossActions>();
    private readonly InputAction m_Boss_BossPlayerUp;
    private readonly InputAction m_Boss_BossPlayerLeft;
    private readonly InputAction m_Boss_BossPlayerRight;
    private readonly InputAction m_Boss_BossPlayerDown;
    public struct BossActions
    {
        private @Controls m_Wrapper;
        public BossActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BossPlayerUp => m_Wrapper.m_Boss_BossPlayerUp;
        public InputAction @BossPlayerLeft => m_Wrapper.m_Boss_BossPlayerLeft;
        public InputAction @BossPlayerRight => m_Wrapper.m_Boss_BossPlayerRight;
        public InputAction @BossPlayerDown => m_Wrapper.m_Boss_BossPlayerDown;
        public InputActionMap Get() { return m_Wrapper.m_Boss; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BossActions set) { return set.Get(); }
        public void AddCallbacks(IBossActions instance)
        {
            if (instance == null || m_Wrapper.m_BossActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BossActionsCallbackInterfaces.Add(instance);
            @BossPlayerUp.started += instance.OnBossPlayerUp;
            @BossPlayerUp.performed += instance.OnBossPlayerUp;
            @BossPlayerUp.canceled += instance.OnBossPlayerUp;
            @BossPlayerLeft.started += instance.OnBossPlayerLeft;
            @BossPlayerLeft.performed += instance.OnBossPlayerLeft;
            @BossPlayerLeft.canceled += instance.OnBossPlayerLeft;
            @BossPlayerRight.started += instance.OnBossPlayerRight;
            @BossPlayerRight.performed += instance.OnBossPlayerRight;
            @BossPlayerRight.canceled += instance.OnBossPlayerRight;
            @BossPlayerDown.started += instance.OnBossPlayerDown;
            @BossPlayerDown.performed += instance.OnBossPlayerDown;
            @BossPlayerDown.canceled += instance.OnBossPlayerDown;
        }

        private void UnregisterCallbacks(IBossActions instance)
        {
            @BossPlayerUp.started -= instance.OnBossPlayerUp;
            @BossPlayerUp.performed -= instance.OnBossPlayerUp;
            @BossPlayerUp.canceled -= instance.OnBossPlayerUp;
            @BossPlayerLeft.started -= instance.OnBossPlayerLeft;
            @BossPlayerLeft.performed -= instance.OnBossPlayerLeft;
            @BossPlayerLeft.canceled -= instance.OnBossPlayerLeft;
            @BossPlayerRight.started -= instance.OnBossPlayerRight;
            @BossPlayerRight.performed -= instance.OnBossPlayerRight;
            @BossPlayerRight.canceled -= instance.OnBossPlayerRight;
            @BossPlayerDown.started -= instance.OnBossPlayerDown;
            @BossPlayerDown.performed -= instance.OnBossPlayerDown;
            @BossPlayerDown.canceled -= instance.OnBossPlayerDown;
        }

        public void RemoveCallbacks(IBossActions instance)
        {
            if (m_Wrapper.m_BossActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBossActions instance)
        {
            foreach (var item in m_Wrapper.m_BossActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BossActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BossActions @Boss => new BossActions(this);
    private int m_DefaultSchemeIndex = -1;
    public InputControlScheme DefaultScheme
    {
        get
        {
            if (m_DefaultSchemeIndex == -1) m_DefaultSchemeIndex = asset.FindControlSchemeIndex("Default");
            return asset.controlSchemes[m_DefaultSchemeIndex];
        }
    }
    public interface IDefaultActions
    {
        void OnPlayer1(InputAction.CallbackContext context);
        void OnPlayer2(InputAction.CallbackContext context);
    }
    public interface IBossActions
    {
        void OnBossPlayerUp(InputAction.CallbackContext context);
        void OnBossPlayerLeft(InputAction.CallbackContext context);
        void OnBossPlayerRight(InputAction.CallbackContext context);
        void OnBossPlayerDown(InputAction.CallbackContext context);
    }
}
